<?php
/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Application\Vespolina\ProductBundle\Document;

use \Jeka\TagsBundle\Document\Tag;
use \Jeka\ImageBundle\Document\Image;
use Vespolina\ProductBundle\Document\BaseProduct as BaseProduct;
use Vespolina\CartBundle\Model\CartableItemInterface;

use Symfony\Component\Validator\Constraints as Assert;

/**
 * This file has been generated by the EasyExtends bundle ( http://sonata-project.org/easy-extends )
 *
 * References :
 *   working with object : http://www.doctrine-project.org/docs/mongodb_odm/1.0/en/reference/working-with-objects.html
 *
 * @author Eugeny Fomin <info@jeka.ru>
 */
class Product extends BaseProduct implements CartableItemInterface
{
    /**
     * @var integer $id
     */
    protected $id;

    /**
     * @var Jeka\CategoryBundle\Document\Category
     */
    protected $categories = array();

    /**
     * @var string $id
     */
    protected $price;


    /**
     * @var Vespolina\ProductBundle\Document\ProductIdentifierSet
     */
    protected $primaryIdentifierSet;

    /**
     * @var Vespolina\ProductBundle\Document\OptionSet
     */
    protected $options = array();

    /**
     * @var Jeka\ImageBundle\Document\Image
     */
    protected $images = array();

    private $images_ordered = array();
    protected $tags = array();

    public function __construct($identifierSetClass)
    {
        $this->options = new \Doctrine\Common\Collections\ArrayCollection();
        $this->categories = new \Doctrine\Common\Collections\ArrayCollection();
        $this->images = new \Doctrine\Common\Collections\ArrayCollection();
        $this->identifiers = new \Doctrine\Common\Collections\ArrayCollection();
        $this->tags = new \Doctrine\Common\Collections\ArrayCollection();
        parent::__construct($identifierSetClass);

    }

    /**
     * Get id
     *
     * @return integer $id
     */
    public function getId()
    {
        return $this->id;
    }


    /**
     * Get $price
     *
     * @return string $price
     */
    public function getPrice()
    {
        return $this->price;
    }

    /**
     * Set $price
     */
    public function setPrice($price)
    {
        $this->price = $price;
    }


    /**
     * Add category
     * @param Jeka\CategoryBundle\Document\Category $category
     */
    public function addCategories(\Jeka\CategoryBundle\Document\Category $category)
    {
        $this->categories[] = $category;
    }

    /**
     * Get categories
     *
     * @return Doctrine\Common\Collections\Collection $categories
     */
    public function getCategories()
    {
        return $this->categories;
    }

    /**
     * Add image
     *
     * @param Jeka\ImageBundle\Document\Image $image
     */
    public function addImages(\Jeka\ImageBundle\Document\Image $image)
    {
        $this->images[] = $image;
    }

    /**
     * Get images
     *
     * @return Doctrine\Common\Collections\Collection $images
     */
    public function getImages()
    {
        return $this->images;
    }

    public function getImagesOrderedArray()
    {
        if ($this->images->count() != count($this->images_ordered) || $this->images_ordered == null) {
            $this->images_ordered = $this->getImages()->toArray();
            usort($this->images_ordered, function ($a, $b)
            {
                if ($a->getPos() == $b->getPos()) {
                    return 0;
                }
                return $a->getPos() < $b->getPos() ? 1 : -1;
            });
        }
        return $this->images_ordered;
    }

    public function getPreviewImage()
    {
        $this->getImagesOrderedArray();
        return isset($this->images_ordered[0]) ? $this->images_ordered[0] : null;
    }

    /**
     * @var string $slug
     */
    protected $slug;


    /**
     * Set slug
     *
     * @param string $slug
     */
    public function setSlug($slug)
    {
        $this->slug = $slug;
    }

    /**
     * Get slug
     *
     * @return string $slug
     */
    public function getSlug()
    {
        return $this->slug;
    }

    public function getFirstCategory()
    {
        return $this->categories->count() > 0 ? $this->categories[0] : null;
    }

    public function getCategorySlug()
    {
        return $this->getFirstCategory()->getSlug();
    }


    /**
     * @var \Symfony\Component\HttpFoundation\File\UploadedFile
     * @Assert\File(maxSize="12000000")
     */
    private $uploaded_image;

    public function getUploadedImage()
    {
        return $this->uploaded_image;
    }

    public function setUploadedImage($value)
    {
        $this->uploaded_image = $value;
    }


    /**
     * @var Vespolina\ProductBundle\Document\ProductIdentifierSet
     */
    protected $identifiers = array();


    /**
     * Add options
     *
     * @param Vespolina\ProductBundle\Document\OptionGroup $options
     */
    public function addOptions(\Vespolina\ProductBundle\Document\OptionGroup $options)
    {
        $this->options[] = $options;
    }

    /**
     * Get options
     *
     * @return Doctrine\Common\Collections\Collection $options
     */
    public function getOptions()
    {
        return $this->options;
    }

    /**
     * Add identifiers
     *
     * @param Vespolina\ProductBundle\Document\ProductIdentifierSet $identifiers
     */
    public function addIdentifiers(\Vespolina\ProductBundle\Document\ProductIdentifierSet $identifiers)
    {
        $this->identifiers[] = $identifiers;
    }

    /**
     * Get identifiers
     *
     * @return Doctrine\Common\Collections\Collection $identifiers
     */
    public function getIdentifiers()
    {
        return $this->identifiers;
    }

    /**
     * Return the name of the CartableItem
     *
     * @return string name
     */
    function getName()
    {
        return parent::getName();
    }

    function removeImage(Image $image)
    {
        $this->images->removeElement($image);
    }

    /**
     * @var Vespolina\ProductBundle\Document\Feature
     */
    protected $features = array();


    /**
     * Add features
     *
     * @param Vespolina\ProductBundle\Document\Feature $features
     */
    public function addFeatures(\Vespolina\ProductBundle\Document\Feature $features)
    {
        $this->features[] = $features;
    }

    /**
     * Get features
     *
     * @return Doctrine\Common\Collections\Collection $features
     */
    public function getFeatures()
    {
        return $this->features;
    }

    /**
     * @var Jeka\TagsBundle\Document\Tag
     */

    /**
     * Add tags
     *
     * @param Jeka\TagsBundle\Document\Tag $tags
     */
    public function addTags(\Jeka\TagsBundle\Document\Tag $tags)
    {
        $this->tags[] = $tags;
    }

    /**
     * Get tags
     *
     * @return Doctrine\Common\Collections\Collection $tags
     */
    public function getTags()
    {
        return $this->tags;
    }

    public function getTagsText()
    {
        //$this->tags_text;
        $names = array();
        foreach ($this->getTags() as $tag)
        {
            $names[] = $tag->getName();
        }
        return implode(', ', $names);
    }

    public function setTagsText($text)
    {
        $this->tags = new \Doctrine\Common\Collections\ArrayCollection();
        $names = explode(',', $text);
        foreach ($names as $name)
        {
            $name = trim($name);
            $tag = new Tag();
            $tag->setName($name);
            $this->addTags($tag);
        }
    }

    public function getS3Id()
    {
        $id = false;
        try {
            $id = $this->getIdentifierSets()->get(0)->getIdentifier('s3')->getCode();
        } catch (\Exception $e) {
            $id = false;
        }
        return $id;
    }
    /**
     * @var float $random
     */
    protected $random;


    /**
     * Set random
     *
     * @param float $random
     */
    public function setRandom($random)
    {
        $this->random = $random;
    }

    /**
     * Get random
     *
     * @return float $random
     */
    public function getRandom()
    {
        return $this->random;
    }
    /**
     * @var boolean $disabled
     */
    protected $disabled;


    /**
     * Set disabled
     *
     * @param boolean $disabled
     */
    public function setDisabled($disabled)
    {
        $this->disabled = $disabled;
    }

    /**
     * Get disabled
     *
     * @return boolean $disabled
     */
    public function getDisabled()
    {
        return $this->disabled;
    }
}
